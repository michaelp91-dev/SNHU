/ Data Structures
// Course Struct:
//    String courseNumber
//    String courseName
//    Vector<String> prerequisites

// Global Variable:
// Vector<Course> allCourses

// Function Declarations
Function loadCourseData(String filePath) -> Vector<Course>
Function validateData(Vector<Course> courses) -> Boolean
Function searchCourse(Vector<Course> courses, String courseNumber) -> void

// Function Definitions

Function loadCourseData(String filePath) -> Vector<Course>
  // 1. Initialize Variables
  Vector<Course> courses; 

  // 2. Open File
  File file = openFile(filePath)

  if file == null:
      print "Error: Unable to open file."
      return empty Vector<Course>

   // 3. Read and Parse Lines
   while file has next line:
        String line = file.readLine()
        Vector<String> lineValues = split(line, ",")  // Split by commas

        // 3.1. Validate Line Values
        if lineValues.size() < 2:
           print "Error: Invalid line format in file."
           file.close()
           return empty Vector<Course> // Exit if format is bad

        // 3.2 Create and Populate the Course Object
        Course currentCourse
        currentCourse.courseNumber = lineValues[0]
        currentCourse.courseName = lineValues[1]

       // 3.3 Load Prerequisites 
       for i = 2 to lineValues.size() - 1
          currentCourse.prerequisites.push_back(lineValues[i])
       end for

       courses.push_back(currentCourse)
  end while

  file.close()
  
  // 4. Validate Data
  if validateData(courses) == false:
        return empty Vector<Course> // Exit the function

  return courses
end function

Function validateData(Vector<Course> courses) -> Boolean
  // 1. Iterate Through Courses
  for each course in courses:
    // 2. Iterate Through Prerequisites
    for each prerequisite in course.prerequisites:
       Boolean prerequisiteFound = false;
          // 3. Check for Prerequisites in Course List
         for each otherCourse in courses:
              if prerequisite == otherCourse.courseNumber:
                 prerequisiteFound = true
                 break  // Stop looking at courses if prereq is found.
         end for

          // 4. If prereq not found, error
        if prerequisiteFound == false:
           print "Error: Prerequisite '" + prerequisite + "' for course '" + course.courseNumber + "' does not exist."
           return false;

    end for
  end for
  
  return true // All validation passed
end function

Function searchCourse(Vector<Course> courses, String courseNumber) -> void
    // 1. Search for matching course
    for each course in courses:
       if course.courseNumber == courseNumber:
            print "Course Number: " + course.courseNumber
            print "Course Name: " + course.courseName
            print "Prerequisites:"

            if course.prerequisites.size() > 0:
               for each prereq in course.prerequisites:
                   print "   " + prereq
               end for
            else:
               print "    None"
            end if
            return  // Found, exit function

       end if
    end for

  print "Error: Course with number " + courseNumber + " not found."
end function

// Main Program Logic
// 1. Get File Path
String filePath = "courses.txt" // (Or get from user input)

// 2. Load Data
allCourses = loadCourseData(filePath)

// 3. Check if Loaded
if allCourses is not empty:
   //4. Get user Input
   String userInputCourse = getUserInput("Enter the course number: ")

   //5. Search and Print
   searchCourse(allCourses, userInputCourse)
end if