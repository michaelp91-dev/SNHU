// Course Struct:
//    String courseNumber
//    String courseName
//    Vector<String> prerequisites

// Global Variables:
// Vector<Course> allCoursesVector
// HashTable<String, Course> allCoursesHash
// Tree<Course> allCoursesTree
// HashTable<String, Boolean> validCourseNumbers  // For O(1) Prerequisite Validation

// Function Declarations
Function loadCourseDataVector(String filePath) -> Vector<Course>
Function validateDataVector(Vector<Course> courses, HashTable<String, Boolean> validCourseNumbers) -> Boolean
Function searchCourseVector(Vector<Course> courses, String courseNumber) -> void
Function printAllCoursesVector(Vector<Course> courses) -> void

Function loadCourseDataHash(String filePath) -> HashTable<String, Course>
Function validateDataHash(HashTable<String, Course> courses, HashTable<String, Boolean> validCourseNumbers) -> Boolean
Function searchCourseHash(HashTable<String, Course> courses, String courseNumber) -> void
Function printAllCoursesHash(HashTable<String, Course> courses) -> void

Function loadCourseDataTree(String filePath) -> Tree<Course>
Function validateDataTree(Tree<Course> courses, HashTable<String, Boolean> validCourseNumbers) -> Boolean
Function searchCourseTree(Tree<Course> courses, String courseNumber) -> void
Function printAllCoursesTree(Tree<Course> courses) -> void
Function insertCourse(Tree<Course> tree, Course course) -> void  // Explicit BST Insert

Function loadValidCourseNumbers(Tree<Course> courses) -> HashTable<String, Boolean>
Function displayMenu() -> Integer // Returns the menu choice
Function processMenuChoice(Integer choice) -> void

Function compareCourses(Course course1, Course course2) -> Boolean

// --- Vector Implementation ---

Function loadCourseDataVector(String filePath) -> Vector<Course>
  // 1. Initialize Variables
  Vector<Course> courses

  // 2. Open File
  File file = openFile(filePath)

  if file == null:
      print "Error: Unable to open file."
      return empty Vector<Course>

   // 3. Read and Parse Lines
   while file has next line:
        String line = file.readLine()
        Vector<String> lineValues = split(line, ",")

        // 3.1. Validate Line Values
        if lineValues.size() < 2:
           print "Error: Invalid line format in file."
           file.close()
           return empty Vector<Course>

        // 3.2 Create and Populate the Course Object
        Course currentCourse
        currentCourse.courseNumber = lineValues[0]
        currentCourse.courseName = lineValues[1]

       // 3.3 Load Prerequisites
       for i = 2 to lineValues.size() - 1
          currentCourse.prerequisites.push_back(lineValues[i])
       end for

       courses.push_back(currentCourse)
  end while

  file.close()

  // 4. Load valid course numbers
  validCourseNumbers = loadValidCourseNumbers(allCoursesTree)

  // 5. Validate Data
  if validateDataVector(courses, validCourseNumbers) == false:
        return empty Vector<Course>

  return courses
end function

Function validateDataVector(Vector<Course> courses, HashTable<String, Boolean> validCourseNumbers) -> Boolean
  // Use the hash table to check
   for each course in courses:
      for each prerequisite in course.prerequisites:
         if validCourseNumbers.containsKey(prerequisite) == false:
           print "Error: Prerequisite '" + prerequisite + "' for course '" + course.courseNumber + "' does not exist."
           return false
         end if
      end for
   end for
   return true
end Function


Function searchCourseVector(Vector<Course> courses, String courseNumber) -> void
    // 1. Search for matching course
    for each course in courses:
       if course.courseNumber == courseNumber:
            print "Course Number: " + course.courseNumber
            print "Course Name: " + course.courseName
            print "Prerequisites:"

            if course.prerequisites.size() > 0:
               for each prereq in course.prerequisites:
                   print "   " + prereq
               end for
            else:
               print "    None"
            end if
            return  // Found, exit function

       end if
    end for

  print "Error: Course with number " + courseNumber + " not found."
end function

Function printAllCoursesVector(Vector<Course> courses) -> void
  // 1. Create a Copy of Courses for Sorting
  Vector<Course> sortedCourses = courses
  
  // 2. Sort by course number
    sort(sortedCourses, compareCourses)

    // 3. Print each course in sorted order
  for each course in sortedCourses:
      print course.courseNumber + " " + course.courseName
  end for
end function
    
Function compareCourses(Course course1, Course course2) -> Boolean
    if course1.courseNumber < course2.courseNumber:
        return true
    else:
      return false
    end if
end function

// --- Hash Table Implementation ---

Function loadCourseDataHash(String filePath) -> HashTable<String, Course>
  // 1. Initialize Variables
  HashTable<String, Course> courses

  // 2. Open File
  File file = openFile(filePath)

  if file == null:
      print "Error: Unable to open file."
      return empty HashTable<String, Course>

   // 3. Read and Parse Lines
   while file has next line:
        String line = file.readLine()
        Vector<String> lineValues = split(line, ",")

        // 3.1. Validate Line Values
        if lineValues.size() < 2:
           print "Error: Invalid line format in file."
           file.close()
           return empty HashTable<String, Course>

        // 3.2 Create and Populate the Course Object
        Course currentCourse
        currentCourse.courseNumber = lineValues[0]
        currentCourse.courseName = lineValues[1]

       // 3.3 Load Prerequisites
       for i = 2 to lineValues.size() - 1
          currentCourse.prerequisites.push_back(lineValues[i])
       end for

       //3.4 Store in Hash Table
       courses.insert(currentCourse.courseNumber, currentCourse)
  end while

  file.close()

  // 4. Load valid course numbers
  validCourseNumbers = loadValidCourseNumbers(allCoursesTree)

  // 5. Validate Data
  if validateDataHash(courses, validCourseNumbers) == false:
        return empty HashTable<String, Course>

  return courses
end function


Function validateDataHash(HashTable<String, Course> courses, HashTable<String, Boolean> validCourseNumbers) -> Boolean
  // Use the hash table to check
   for each courseEntry in courses:
      Course course = courseEntry.value
      for each prerequisite in course.prerequisites:
         if validCourseNumbers.containsKey(prerequisite) == false:
           print "Error: Prerequisite '" + prerequisite + "' for course '" + course.courseNumber + "' does not exist."
           return false
         end if
      end for
   end for
   return true
end Function

Function searchCourseHash(HashTable<String, Course> courses, String courseNumber) -> void
    // 1. Check for the course
    if courses.containsKey(courseNumber) == true:
       Course foundCourse = courses.get(courseNumber)

       print "Course Number: " + foundCourse.courseNumber
       print "Course Name: " + foundCourse.courseName
       print "Prerequisites:"

        if foundCourse.prerequisites.size() > 0:
          for each prereq in foundCourse.prerequisites:
               print "   " + prereq
          end for
        else:
            print "    None"
        end if
        return  // Found, exit function
    end if

  print "Error: Course with number " + courseNumber + " not found."
end function

Function printAllCoursesHash(HashTable<String, Course> courses) -> void
   // 1. Get a vector of courses for sorting
   Vector<Course> courseList = courses.getValues()

   // 2. Sort by course number
  sort(courseList, compareCourses)

    // 3. Print each course in sorted order
  for each course in courseList:
      print course.courseNumber + " " + course.courseName
  end for
end function


// --- Tree Implementation ---
Function loadCourseDataTree(String filePath) -> Tree<Course>
  // 1. Initialize Variables
  Tree<Course> courses

  // 2. Open File
  File file = openFile(filePath)

  if file == null:
      print "Error: Unable to open file."
      return empty Tree<Course>

   // 3. Read and Parse Lines
   while file has next line:
        String line = file.readLine()
        Vector<String> lineValues = split(line, ",")

        // 3.1. Validate Line Values
        if lineValues.size() < 2:
           print "Error: Invalid line format in file."
           file.close()
           return empty Tree<Course>

        // 3.2 Create and Populate the Course Object
        Course currentCourse
        currentCourse.courseNumber = lineValues[0]
        currentCourse.courseName = lineValues[1]

       // 3.3 Load Prerequisites
       for i = 2 to lineValues.size() - 1
          currentCourse.prerequisites.push_back(lineValues[i])
       end for

       // 3.4 Insert into BST
       insertCourse(courses, currentCourse)
  end while

  file.close()

    // 4. Load valid course numbers (AFTER tree is built)
   validCourseNumbers = loadValidCourseNumbers(courses)

  // 5. Validate Data
  if validateDataTree(courses, validCourseNumbers) == false:
        return empty Tree<Course>

  return courses
end function

Function validateDataTree(Tree<Course> courses, HashTable<String, Boolean> validCourseNumbers) -> Boolean
   // Use the hash table to check
   for each course in courses:
      for each prerequisite in course.prerequisites:
         if validCourseNumbers.containsKey(prerequisite) == false:
           print "Error: Prerequisite '" + prerequisite + "' for course '" + course.courseNumber + "' does not exist."
           return false
         end if
      end for
   end for
   return true
end Function

Function loadValidCourseNumbers(Tree<Course> courses) -> HashTable<String, Boolean>
    HashTable<String, Boolean> validCourses

    Vector<Course> courseList = courses.inorderTraversal()

     // Now load into hash table for fast validation
    for each course in courseList:
        validCourses.insert(course.courseNumber, true)  // Just the presence of key matters

    return validCourses
end Function

Function insertCourse(Tree<Course> tree, Course course) -> void
  // 1. If tree is empty, create a new node
  if tree.root == null:
     tree.root = new Node(course)
     return
  end if

  // 2. Otherwise, traverse the tree and insert
  Node currentNode = tree.root

  while true:
    // 3. Compare course numbers (BST ordering)
    if course.courseNumber < currentNode.data.courseNumber:  // Go left
      if currentNode.left == null:
         currentNode.left = new Node(course)
         return
      else:
         currentNode = currentNode.left  // Move to left child
      end if
    else:  // Go right (or handle duplicates, if desired)
      if currentNode.right == null:
         currentNode.right = new Node(course)
         return
      else:
         currentNode = currentNode.right  // Move to right child
      end if
    end if
  end while
end Function

Function searchCourseTree(Tree<Course> courses, String courseNumber) -> void
    // 1. Search for the Course
   Course foundCourse = courses.search(courseNumber)

    // 2. Check if found
    if foundCourse != null:
        print "Course Number: " + foundCourse.courseNumber
        print "Course Name: " + foundCourse.courseName
        print "Prerequisites:"

        if foundCourse.prerequisites.size() > 0:
          for each prereq in foundCourse.prerequisites:
               print "   " + prereq
          end for
        else:
           print "    None"
        end if
        return

    end if

  print "Error: Course with number " + courseNumber + " not found."
end function

Function printAllCoursesTree(Tree<Course> courses) -> void
  // 1. Get All Courses with Inorder Traversal
    Vector<Course> courseList = courses.inorderTraversal()
    
  // 2. Print each course
  for each course in courseList:
      print course.courseNumber + " " + course.courseName
  end for
end function

Function loadValidCourseNumbers(Tree<Course> courses) -> HashTable<String, Boolean>
    HashTable<String, Boolean> validCourses

    Vector<Course> courseList = courses.inorderTraversal()

     // Now load into hash table for fast validation
    for each course in courseList:
        validCourses.insert(course.courseNumber, true)  // Just the presence of key matters

    return validCourses
end Function

Function displayMenu() -> Integer
  print "--- Menu ---"
  print "1. Load Course Data"
  print "2. Print All Courses"
  print "3. Print Course Information"
  print "9. Exit"
  Integer choice = getUserInput("Enter your choice: ")
  return choice
end function

Function processMenuChoice(Integer choice) -> void
    String filePath
    String courseNumber

  if choice == 1:
      filePath = getUserInput("Enter the course file path: ")
      allCoursesVector = loadCourseDataVector(filePath)
      allCoursesHash = loadCourseDataHash(filePath)
      allCoursesTree = loadCourseDataTree(filePath)
      print "Course data loaded."
  else if choice == 2:
     Integer structChoice = getUserInput("Select Data Structure (1: Vector, 2: Hash, 3: Tree): ")
       if structChoice == 1:
           printAllCoursesVector(allCoursesVector)
       else if structChoice == 2:
           printAllCoursesHash(allCoursesHash)
       else if structChoice == 3:
           printAllCoursesTree(allCoursesTree)
       else:
          print "Invalid Data Structure Choice"
       end if

  else if choice == 3:
      courseNumber = getUserInput("Enter course number to search: ")
      Integer structChoice = getUserInput("Select Data Structure (1: Vector, 2: Hash, 3: Tree): ")
      if structChoice == 1:
         searchCourseVector(allCoursesVector, courseNumber)
      else if structChoice == 2:
         searchCourseHash(allCoursesHash, courseNumber)
      else if structChoice == 3:
         searchCourseTree(allCoursesTree, courseNumber)
      else:
         print "Invalid Data Structure Choice"
      end if

  else if choice == 9:
    print "Exiting..."
  else:
    print "Invalid choice."
  end if
end function

// Main Program Logic
Vector<Course> allCoursesVector
HashTable<String, Course> allCoursesHash
Tree<Course> allCoursesTree
HashTable<String, Boolean> validCourseNumbers // for optimized validation

Integer menuChoice
do
  menuChoice = displayMenu()
  processMenuChoice(menuChoice)
while menuChoice != 9
