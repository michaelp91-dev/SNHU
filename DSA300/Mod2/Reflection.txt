The primary purpose of this code is to manage and manipulate a collection of bid data, specifically focusing on sorting these bids efficiently. The code implements two common sorting algorithms: quicksort and selection sort, both used to arrange the bids alphabetically by their titles. Quicksort, known for its average O(n log n) time complexity, is implemented recursively, using a partition function to divide the bid list into smaller sub-lists and conquer them. Selection sort, on the other hand, uses a more straightforward approach with nested loops, having an O(n^2) time complexity. To load the bid data, the code parses a CSV file, extracting the required bid information (ID, title, fund, and amount) and storing them in a vector of Bid objects. The program also provides a simple menu allowing the user to load bids from a CSV, display the loaded bids, sort using either the selection sort or quicksort algorithm, and exit the program.

A major challenge encountered was efficiently sorting a large number of bids while maintaining reasonable performance. While selection sort is simple to implement, its O(n^2) time complexity is not practical for handling large datasets. To address this, quicksort, which offers better performance in most cases (O(n log n) average) was implemented as a secondary sorting option. Challenges were also faced with converting the string representations of numbers from the CSV file to doubles, requiring the implementation of a custom function to remove unwanted characters before conversion. Error handling was done by incorporating try-catch blocks for CSV parsing, preventing the program from crashing upon encountering file read errors. Input validation was not included in this version, but it could be addressed with additional code to check for the validity of the data. The menu system was implemented to improve usability for testing purposes.